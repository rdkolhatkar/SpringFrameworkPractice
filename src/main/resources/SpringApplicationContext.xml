<?xml version="1.0" encoding="UTF-8"?>
<!--
This is the XML declaration.
It tells the parser that this is an XML file, following version 1.0 of XML specification,
and that the character encoding used inside is UTF-8.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
    The <beans> root element defines a Spring ApplicationContext configuration file.
    Attributes explained:

    1. xmlns="http://www.springframework.org/schema/beans"
       - Declares the XML namespace for Spring beans configuration.
       - Any tag inside <beans> without prefix (like <bean>) comes from this namespace.

    2. xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       - Enables XML Schema validation features (from W3C standard).
       - Required to associate XML elements with XSD schemas.

    3. xsi:schemaLocation
       - Maps the namespace URI to its actual schema definition file (XSD).
       - "http://www.springframework.org/schema/beans" → namespace
       - "http://www.springframework.org/schema/beans/spring-beans.xsd" → actual XSD file that Spring uses to validate bean configuration.
    -->

    <!-- In Spring context XML, the scope="prototype" attribute specifies that a new object (bean instance) will be created every time the bean is requested from the Spring container.
         It ensures multiple independent bean instances, unlike the default singleton scope which returns the same instance each time. -->
    <bean id="alien" class="com.spring.framework.model.Alien" scope="prototype"> <!-- Create the object of Alien class with id as "alien" -->
        <property name="duration" value="21"/>
        <property name="laptop" ref="device"/> <!-- We already have a bean created for "Laptop.class" whose ID value is "device" we are linking that bean as a reference with property called as ref-->
        <constructor-arg ref="device"/>         <!-- Passing values inside the Constructor - 1st parameter: Laptop -->
        <constructor-arg value="21"/>           <!-- Passing values inside the Constructor - 2nd parameter: timevalue -->
        <constructor-arg value="42"/>           <!-- Passing values inside the Constructor - 3rd parameter: timeScale -->
    </bean>
    <!-- Setter Injection in the spring framework-->
    <bean id="entity" class="com.spring.framework.model.Alien"> <!-- Create new object of Alien class with id as "entity" -->
        <property name="duration" value="21"/>
        <property name="laptop" ref="device"/> <!-- We already have a bean created for "Laptop.class" whose ID value is "device" we are linking that bean as a reference with property called as ref-->
        <!-- order in which you have defined the constructor signature should match with the Sequence of constructor-args mentioned in the SpringApplicationContext.xml or you have to define the "type=<Variable type of constructor signature>"-->
        <!-- if you have two constructor variables with same data type then you have to specify the index number of constructor signature -->
        <constructor-arg type="int" index="1" value="21"/>           <!-- 2nd parameter: timevalue -->
        <constructor-arg type="int" index="2" value="42"/>           <!-- 3rd parameter: timeScale -->
        <constructor-arg type="com.spring.framework.model.Laptop" ref="device"/>         <!-- 1st parameter: Laptop -->
    </bean>
    <!-- If we create the object of same class with two different  -->
    <bean id="device" class="com.spring.framework.model.Laptop">
    </bean>
    <!--
    <bean> tag tells Spring to create and manage a Java object (called a Spring Bean).

    Attributes:
    - id="alien"
        -> This is the unique identifier (name) of the bean inside the Spring container.
           You will use this ID when retrieving the bean (e.g., context.getBean("alien")).

    - class="com.spring.framework.model.Alien"
        -> Fully Qualified Class Name (FQCN) of the Java class Spring will instantiate.
           In this case, it's com.spring.framework.model.Alien (Alien.java inside that package).

    Body:
    - Currently empty, but you could configure properties or dependencies here using <property> tags.
      Example:
        <property name="age" value="25"/>
        <property name="laptop" ref="laptopBean"/>
    -->

</beans>
        <!--
        Closing </beans> marks the end of Spring's bean configuration.
        -->
